function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Hiccup.Node{:code}, 1}})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Hiccup.Node{:td}, 1}})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:class,), Tuple{String}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Hiccup.Node{tag} where tag, 1}})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:class,), Tuple{String}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Hiccup.Node{:div}, 1}})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{String, 1}})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Hiccup.Node{:tr}, 1}})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Any, 1}})
    precompile(Tuple{typeof(Hiccup.tr), Hiccup.Node{:td}, Hiccup.Node{:td}})
    isdefined(Hiccup, Symbol("##span#11")) && precompile(Tuple{getfield(Hiccup, Symbol("##span#11")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Hiccup.span), String, Int})
    isdefined(Hiccup, Symbol("##table#26")) && precompile(Tuple{getfield(Hiccup, Symbol("##table#26")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Hiccup.table), String, Int})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:href,), Tuple{String}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Hiccup.Node{:code}, 1}})
    isdefined(Hiccup, Symbol("##Node#1")) && precompile(Tuple{getfield(Hiccup, Symbol("##Node#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:class, :block), Tuple{String, Bool}}}, Type{Hiccup.Node{tag} where tag}, Symbol, Base.Dict{Any, Any}, Array{Any, 1}})
    isdefined(Hiccup, Symbol("##tr#27")) && precompile(Tuple{getfield(Hiccup, Symbol("##tr#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Hiccup.tr), Hiccup.Node{:td}, Hiccup.Node{:td}})
    isdefined(Hiccup, Symbol("#kw##div")) && precompile(Tuple{getfield(Hiccup, Symbol("#kw##div")), NamedTuple{(:class,), Tuple{String}}, typeof(Hiccup.div), Array{Hiccup.Node{tag} where tag, 1}})
    precompile(Tuple{typeof(Hiccup.cssparse), String})
    isdefined(Hiccup, Symbol("#kw##div")) && precompile(Tuple{getfield(Hiccup, Symbol("#kw##div")), NamedTuple{(:class,), Tuple{String}}, typeof(Hiccup.div), Array{Hiccup.Node{:div}, 1}})
    precompile(Tuple{typeof(Hiccup.pre), Hiccup.Node{:code}})
end
